package database;

import common.exceptions.DatabaseException;
import exceptions.DataBaseException;
import log.Log;

import java.sql.*;

public class DBManager {
    private static final String JDBC_DRIVER = "org.postgresql.Driver";

    private final String user;
    private final String password;
    private final String url;
    private Connection connection;


    public DBManager(String url, String u, String p) throws DataBaseException {
        user = u;
        password = p;
        this.url = url;
        connectToDataBase();
    }

    private void connectToDataBase() throws DataBaseException {
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
        } catch (SQLException exception) {
            throw new DatabaseException("Ошибка при подключении к базе данных.");
        } catch (ClassNotFoundException exception) {
            throw new DatabaseException("Драйвер данных не найден.");
        }
    }

    /**
     * @param sqlStatement Необходимо подготовить SQL-инструкцию.
     * @param generateKeys Необходимо сгенерировать ключи.
     * @return Подготовленное заявление.
     * @throws DataBaseException Когда внутри есть исключение.
     */

    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws DataBaseException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            return preparedStatement;
        } catch (SQLException exception) {
            throw new DataBaseException("Ошибка при подготовке sql.");
        }
    }

    public Statement getStatement() throws DataBaseException {
        try {
            return connection.createStatement();
        } catch (SQLException e) {
            throw new DataBaseException("Не удается получить SQL.");
        }
    }


    public PreparedStatement getPreparedStatement(String sql) throws DataBaseException {
        return getPreparedStatement(sql, false);
    }

    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
            Log.logger.info("Закрыт SQL запрос '" + sqlStatement + "'.");
        } catch (SQLException exception) {
            Log.logger.error("Произошла ошибка при закрытии SQL запроса '" + sqlStatement + "'.");
        }
    }

    /**
     * Закрытие соединения с базой данных.
     */

    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Log.logger.info("Соединение с базой данных прервано.");
        } catch (SQLException exception) {
            Log.logger.error("Ошибка при прерывании подключения к базе данных.");
        }
    }

    /**
     * Установка режима фиксации базы данных.
     */

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            Log.logger.error("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }

    /**
     * Установите обычный режим работы базы данных.
     */

    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            Log.logger.error("Произошла ошибка при установлении нормального режима базы данных!");
        }
    }

    /**
     * Фиксация состояния базы данных.
     */

    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            Log.logger.error("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    /**
     * Откат состояния базы данных.
     */

    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            Log.logger.error("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    /**
     * Установка точки сохранения базы данных.
     */

    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            Log.logger.error("Произошла ошибка при сохранении состояния базы данных!");
        }
    }


}